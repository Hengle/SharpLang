cmake_minimum_required(VERSION 2.8.12.2)

# find out on which system cmake runs (should be defined with CMakeDetermineSystem.cmake, but not done at this point yet)
if(CMAKE_HOST_UNIX)
  find_program(CMAKE_UNAME uname /bin /usr/bin /usr/local/bin )
  if(CMAKE_UNAME)
    exec_program(uname ARGS -m OUTPUT_VARIABLE CMAKE_HOST_SYSTEM_PROCESSOR RETURN_VALUE val)
  endif()
elseif(CMAKE_HOST_WIN32)
  if (DEFINED ENV{PROCESSOR_ARCHITEW6432})
    set (CMAKE_HOST_SYSTEM_PROCESSOR "$ENV{PROCESSOR_ARCHITEW6432}")
  else()
    set (CMAKE_HOST_SYSTEM_PROCESSOR "$ENV{PROCESSOR_ARCHITECTURE}")
  endif()
endif()


# Detect 32 vs 64 bit
if(CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL "x86_64" OR CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL "AMD64")
  set(SHARPLANG_TRIPLE_CPU "x86_64")
  set(SHARPLANG_MINGW "mingw64")
  set(LLVM_BUILD_SUBFOLDER "build_x64")
elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL "x86")
  set(SHARPLANG_TRIPLE_CPU "i686")
  set(SHARPLANG_MINGW "mingw32")
  set(LLVM_BUILD_SUBFOLDER "build_x32")
else()
  message(FATAL_ERROR "Unknown CMAKE_HOST_SYSTEM_PROCESSOR: ${CMAKE_HOST_SYSTEM_PROCESSOR}")
endif()

# Redefine few things to use LLVM compiler instead
if(WIN32)
set(LLVM_BUILD_PATH "${CMAKE_CURRENT_SOURCE_DIR}/deps/llvm/${LLVM_BUILD_SUBFOLDER}/RelWithDebInfo/bin")
find_program(CMAKE_MAKE_PROGRAM NAMES mingw32-make PATHS "${CMAKE_CURRENT_SOURCE_DIR}/deps/${SHARPLANG_MINGW}/bin" NO_DEFAULT_PATH)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/deps/${SHARPLANG_MINGW}/${SHARPLANG_TRIPLE_CPU}-w64-mingw32/include)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/deps/${SHARPLANG_MINGW}/${SHARPLANG_TRIPLE_CPU}-w64-mingw32/include/c++)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/deps/${SHARPLANG_MINGW}/${SHARPLANG_TRIPLE_CPU}-w64-mingw32/include/c++/${SHARPLANG_TRIPLE_CPU}-w64-mingw32)
set(SHARPLANG_TARGET   "${SHARPLANG_TRIPLE_CPU}-pc-windows-gnu")
else()
set(LLVM_BUILD_PATH "${CMAKE_CURRENT_SOURCE_DIR}/deps/llvm/${LLVM_BUILD_SUBFOLDER}/bin")
set(SHARPLANG_TARGET   "${SHARPLANG_TRIPLE_CPU}-linux-gnu")
endif()

find_program(CMAKE_C_COMPILER NAMES clang PATHS "${LLVM_BUILD_PATH}" NO_DEFAULT_PATH)
find_program(CMAKE_CXX_COMPILER NAMES clang++ PATHS "${LLVM_BUILD_PATH}" NO_DEFAULT_PATH)
find_program(CMAKE_LINKER NAMES llvm-link PATHS "${LLVM_BUILD_PATH}" NO_DEFAULT_PATH)
find_program(CMAKE_CXX_LINKER NAMES llvm-link PATHS "${LLVM_BUILD_PATH}" NO_DEFAULT_PATH)
find_program(CMAKE_C_LINK_EXECUTABLE NAMES llvm-link PATHS "${LLVM_BUILD_PATH}" NO_DEFAULT_PATH)
find_program(CMAKE_CXX_LINK_EXECUTABLE NAMES llvm-link PATHS "${LLVM_BUILD_PATH}" NO_DEFAULT_PATH)

set(SHARPLANG_BUILD_SUBDIR "${CMAKE_BINARY_DIR}/../../lib")

# Set default compilation flags
set(CMAKE_BITCODE_FLAGS   "${CMAKE_BITCODE_FLAGS} -emit-llvm --target=${SHARPLANG_TARGET}")

# Set bitcode output directory
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${SHARPLANG_BUILD_SUBDIR}/runtime/${SHARPLANG_TARGET})

set(CMAKE_C_COMPILER_ID "GNU")
set(CMAKE_C_COMPILER_ID_RUN TRUE)
set(CMAKE_C_COMPILER_FORCED TRUE)
set(CMAKE_CXX_COMPILER_ID "GNU")
set(CMAKE_CXX_COMPILER_ID_RUN TRUE)
set(CMAKE_CXX_COMPILER_FORCED TRUE)
set(CMAKE_COMPILER_IS_GNUCC 1)
set(CMAKE_COMPILER_IS_GNUCXX 1)

# Not sure why those flags need to be defined after project
set(CMAKE_C_ARCHIVE_CREATE "${CMAKE_C_LINK_EXECUTABLE} -o <TARGET> <LINK_FLAGS> <OBJECTS>")
set(CMAKE_CXX_ARCHIVE_CREATE "${CMAKE_CXX_LINK_EXECUTABLE} -o <TARGET> <LINK_FLAGS> <OBJECTS>")
set(CMAKE_C_ARCHIVE_FINISH "")
set(CMAKE_CXX_ARCHIVE_FINISH "")

project(SharpLang)

set(CMAKE_C_OUTPUT_EXTENSION ".bc")
set(CMAKE_CXX_OUTPUT_EXTENSION ".bc")
set(CMAKE_STATIC_LIBRARY_SUFFIX ".bc")
set(CMAKE_STATIC_LIBRARY_PREFIX "")

add_subdirectory(src)
